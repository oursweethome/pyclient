# coding: utf-8

"""
    OpenAPI

    tinkoff.ru/invest OpenAPI.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: al.a.volkov@tinkoff.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Operation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'OperationStatus',
        'trades': 'list[OperationTrade]',
        'commission': 'MoneyAmount',
        'currency': 'Currency',
        'payment': 'float',
        'price': 'float',
        'quantity': 'int',
        'quantity_executed': 'int',
        'figi': 'str',
        'instrument_type': 'InstrumentType',
        'is_margin_call': 'bool',
        '_date': 'datetime',
        'operation_type': 'OperationTypeWithCommission'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'trades': 'trades',
        'commission': 'commission',
        'currency': 'currency',
        'payment': 'payment',
        'price': 'price',
        'quantity': 'quantity',
        'quantity_executed': 'quantityExecuted',
        'figi': 'figi',
        'instrument_type': 'instrumentType',
        'is_margin_call': 'isMarginCall',
        '_date': 'date',
        'operation_type': 'operationType'
    }

    def __init__(self, id=None, status=None, trades=None, commission=None, currency=None, payment=None, price=None, quantity=None, quantity_executed=None, figi=None, instrument_type=None, is_margin_call=None, _date=None, operation_type=None):  # noqa: E501
        """Operation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._trades = None
        self._commission = None
        self._currency = None
        self._payment = None
        self._price = None
        self._quantity = None
        self._quantity_executed = None
        self._figi = None
        self._instrument_type = None
        self._is_margin_call = None
        self.__date = None
        self._operation_type = None
        self.discriminator = None
        self.id = id
        self.status = status
        if trades is not None:
            self.trades = trades
        if commission is not None:
            self.commission = commission
        self.currency = currency
        self.payment = payment
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if quantity_executed is not None:
            self.quantity_executed = quantity_executed
        if figi is not None:
            self.figi = figi
        if instrument_type is not None:
            self.instrument_type = instrument_type
        self.is_margin_call = is_margin_call
        self._date = _date
        if operation_type is not None:
            self.operation_type = operation_type

    @property
    def id(self):
        """Gets the id of this Operation.  # noqa: E501


        :return: The id of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Operation.


        :param id: The id of this Operation.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this Operation.  # noqa: E501


        :return: The status of this Operation.  # noqa: E501
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.


        :param status: The status of this Operation.  # noqa: E501
        :type: OperationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def trades(self):
        """Gets the trades of this Operation.  # noqa: E501


        :return: The trades of this Operation.  # noqa: E501
        :rtype: list[OperationTrade]
        """
        return self._trades

    @trades.setter
    def trades(self, trades):
        """Sets the trades of this Operation.


        :param trades: The trades of this Operation.  # noqa: E501
        :type: list[OperationTrade]
        """

        self._trades = trades

    @property
    def commission(self):
        """Gets the commission of this Operation.  # noqa: E501


        :return: The commission of this Operation.  # noqa: E501
        :rtype: MoneyAmount
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Operation.


        :param commission: The commission of this Operation.  # noqa: E501
        :type: MoneyAmount
        """

        self._commission = commission

    @property
    def currency(self):
        """Gets the currency of this Operation.  # noqa: E501


        :return: The currency of this Operation.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Operation.


        :param currency: The currency of this Operation.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def payment(self):
        """Gets the payment of this Operation.  # noqa: E501


        :return: The payment of this Operation.  # noqa: E501
        :rtype: float
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this Operation.


        :param payment: The payment of this Operation.  # noqa: E501
        :type: float
        """
        if payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")  # noqa: E501

        self._payment = payment

    @property
    def price(self):
        """Gets the price of this Operation.  # noqa: E501


        :return: The price of this Operation.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Operation.


        :param price: The price of this Operation.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Operation.  # noqa: E501

        Число инструментов в выставленной заявке  # noqa: E501

        :return: The quantity of this Operation.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Operation.

        Число инструментов в выставленной заявке  # noqa: E501

        :param quantity: The quantity of this Operation.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def quantity_executed(self):
        """Gets the quantity_executed of this Operation.  # noqa: E501

        Число инструментов, исполненных в заявке  # noqa: E501

        :return: The quantity_executed of this Operation.  # noqa: E501
        :rtype: int
        """
        return self._quantity_executed

    @quantity_executed.setter
    def quantity_executed(self, quantity_executed):
        """Sets the quantity_executed of this Operation.

        Число инструментов, исполненных в заявке  # noqa: E501

        :param quantity_executed: The quantity_executed of this Operation.  # noqa: E501
        :type: int
        """

        self._quantity_executed = quantity_executed

    @property
    def figi(self):
        """Gets the figi of this Operation.  # noqa: E501


        :return: The figi of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._figi

    @figi.setter
    def figi(self, figi):
        """Sets the figi of this Operation.


        :param figi: The figi of this Operation.  # noqa: E501
        :type: str
        """

        self._figi = figi

    @property
    def instrument_type(self):
        """Gets the instrument_type of this Operation.  # noqa: E501


        :return: The instrument_type of this Operation.  # noqa: E501
        :rtype: InstrumentType
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this Operation.


        :param instrument_type: The instrument_type of this Operation.  # noqa: E501
        :type: InstrumentType
        """

        self._instrument_type = instrument_type

    @property
    def is_margin_call(self):
        """Gets the is_margin_call of this Operation.  # noqa: E501


        :return: The is_margin_call of this Operation.  # noqa: E501
        :rtype: bool
        """
        return self._is_margin_call

    @is_margin_call.setter
    def is_margin_call(self, is_margin_call):
        """Sets the is_margin_call of this Operation.


        :param is_margin_call: The is_margin_call of this Operation.  # noqa: E501
        :type: bool
        """
        if is_margin_call is None:
            raise ValueError("Invalid value for `is_margin_call`, must not be `None`")  # noqa: E501

        self._is_margin_call = is_margin_call

    @property
    def _date(self):
        """Gets the _date of this Operation.  # noqa: E501

        ISO8601  # noqa: E501

        :return: The _date of this Operation.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Operation.

        ISO8601  # noqa: E501

        :param _date: The _date of this Operation.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def operation_type(self):
        """Gets the operation_type of this Operation.  # noqa: E501


        :return: The operation_type of this Operation.  # noqa: E501
        :rtype: OperationTypeWithCommission
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this Operation.


        :param operation_type: The operation_type of this Operation.  # noqa: E501
        :type: OperationTypeWithCommission
        """

        self._operation_type = operation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
